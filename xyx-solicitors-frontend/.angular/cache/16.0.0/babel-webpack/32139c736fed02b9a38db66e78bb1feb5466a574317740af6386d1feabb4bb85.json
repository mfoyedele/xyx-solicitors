{"ast":null,"code":"import { inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AccountService } from '@app/_services';\nexport function authGuard(route, state) {\n  const router = inject(Router);\n  const accountService = inject(AccountService);\n  const user = accountService.userValue;\n  if (user) {\n    // authorised so return true\n    return true;\n  }\n  // not logged in so redirect to login page with the return url\n  router.navigate(['/account/login'], {\n    queryParams: {\n      returnUrl: state.url\n    }\n  });\n  return false;\n}","map":{"version":3,"names":["inject","Router","AccountService","authGuard","route","state","router","accountService","user","userValue","navigate","queryParams","returnUrl","url"],"sources":["/home/devkhalifa/Documents/GitHub/xyx-solicitors-frontend/src/app/_helpers/auth.guard.ts"],"sourcesContent":["import { inject } from '@angular/core';\nimport { Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\n\nimport { AccountService } from '@app/_services';\n\nexport function authGuard(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    const router = inject(Router);\n    const accountService = inject(AccountService);\n    const user = accountService.userValue;\n    if (user) {\n        // authorised so return true\n        return true;\n    }\n\n    // not logged in so redirect to login page with the return url\n    router.navigate(['/account/login'], { queryParams: { returnUrl: state.url } });\n    return false;\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,eAAe;AACtC,SAASC,MAAM,QAAqD,iBAAiB;AAErF,SAASC,cAAc,QAAQ,gBAAgB;AAE/C,OAAM,SAAUC,SAASA,CAACC,KAA6B,EAAEC,KAA0B;EAC/E,MAAMC,MAAM,GAAGN,MAAM,CAACC,MAAM,CAAC;EAC7B,MAAMM,cAAc,GAAGP,MAAM,CAACE,cAAc,CAAC;EAC7C,MAAMM,IAAI,GAAGD,cAAc,CAACE,SAAS;EACrC,IAAID,IAAI,EAAE;IACN;IACA,OAAO,IAAI;;EAGf;EACAF,MAAM,CAACI,QAAQ,CAAC,CAAC,gBAAgB,CAAC,EAAE;IAAEC,WAAW,EAAE;MAAEC,SAAS,EAAEP,KAAK,CAACQ;IAAG;EAAE,CAAE,CAAC;EAC9E,OAAO,KAAK;AAChB"},"metadata":{},"sourceType":"module","externalDependencies":[]}