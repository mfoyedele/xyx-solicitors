{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '@environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nclass AccountService {\n  constructor(router, http) {\n    this.router = router;\n    this.http = http;\n    this.userSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('user')));\n    this.user = this.userSubject.asObservable();\n  }\n  get userValue() {\n    return this.userSubject.value;\n  }\n  login(username, password) {\n    return this.http.post(`${environment.apiUrl}/users/authenticate`, {\n      username,\n      password\n    }).pipe(map(user => {\n      // store user details and jwt token in local storage to keep user logged in between page refreshes\n      localStorage.setItem('user', JSON.stringify(user));\n      this.userSubject.next(user);\n      return user;\n    }));\n  }\n  logout() {\n    // remove user from local storage and set current user to null\n    localStorage.removeItem('user');\n    this.userSubject.next(null);\n    this.router.navigate(['/account/login']);\n  }\n  register(user) {\n    return this.http.post(`${environment.apiUrl}/users/register`, user);\n  }\n  getAll() {\n    return this.http.get(`${environment.apiUrl}/users`);\n  }\n  getById(id) {\n    return this.http.get(`${environment.apiUrl}/users/${id}`);\n  }\n  update(id, params) {\n    return this.http.put(`${environment.apiUrl}/users/${id}`, params).pipe(map(x => {\n      // update stored user if the logged in user updated their own record\n      if (id == this.userValue?.id) {\n        // update local storage\n        const user = {\n          ...this.userValue,\n          ...params\n        };\n        localStorage.setItem('user', JSON.stringify(user));\n        // publish updated user to subscribers\n        this.userSubject.next(user);\n      }\n      return x;\n    }));\n  }\n  delete(id) {\n    return this.http.delete(`${environment.apiUrl}/users/${id}`).pipe(map(x => {\n      // auto logout if the logged in user deleted their own record\n      if (id == this.userValue?.id) {\n        this.logout();\n      }\n      return x;\n    }));\n  }\n}\nAccountService.ɵfac = function AccountService_Factory(t) {\n  return new (t || AccountService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n};\nAccountService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AccountService,\n  factory: AccountService.ɵfac,\n  providedIn: 'root'\n});\nexport { AccountService };","map":{"version":3,"names":["BehaviorSubject","map","environment","AccountService","constructor","router","http","userSubject","JSON","parse","localStorage","getItem","user","asObservable","userValue","value","login","username","password","post","apiUrl","pipe","setItem","stringify","next","logout","removeItem","navigate","register","getAll","get","getById","id","update","params","put","x","delete","i0","ɵɵinject","i1","Router","i2","HttpClient","factory","ɵfac","providedIn"],"sources":["/home/devkhalifa/Documents/GitHub/xyx-solicitors-frontend/src/app/_services/account.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { environment } from '@environments/environment';\nimport { User } from '@app/_models';\n\n@Injectable({ providedIn: 'root' })\nexport class AccountService {\n    private userSubject: BehaviorSubject<User | null>;\n    public user: Observable<User | null>;\n\n    constructor(\n        private router: Router,\n        private http: HttpClient\n    ) {\n        this.userSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('user')!));\n        this.user = this.userSubject.asObservable();\n    }\n\n    public get userValue() {\n        return this.userSubject.value;\n    }\n\n    login(username: string, password: string) {\n        return this.http.post<User>(`${environment.apiUrl}/users/authenticate`, { username, password })\n            .pipe(map(user => {\n                // store user details and jwt token in local storage to keep user logged in between page refreshes\n                localStorage.setItem('user', JSON.stringify(user));\n                this.userSubject.next(user);\n                return user;\n            }));\n    }\n\n    logout() {\n        // remove user from local storage and set current user to null\n        localStorage.removeItem('user');\n        this.userSubject.next(null);\n        this.router.navigate(['/account/login']);\n    }\n\n    register(user: User) {\n        return this.http.post(`${environment.apiUrl}/users/register`, user);\n    }\n\n    getAll() {\n        return this.http.get<User[]>(`${environment.apiUrl}/users`);\n    }\n\n    getById(id: string) {\n        return this.http.get<User>(`${environment.apiUrl}/users/${id}`);\n    }\n\n    update(id: string, params: any) {\n        return this.http.put(`${environment.apiUrl}/users/${id}`, params)\n            .pipe(map(x => {\n                // update stored user if the logged in user updated their own record\n                if (id == this.userValue?.id) {\n                    // update local storage\n                    const user = { ...this.userValue, ...params };\n                    localStorage.setItem('user', JSON.stringify(user));\n\n                    // publish updated user to subscribers\n                    this.userSubject.next(user);\n                }\n                return x;\n            }));\n    }\n\n    delete(id: string) {\n        return this.http.delete(`${environment.apiUrl}/users/${id}`)\n            .pipe(map(x => {\n                // auto logout if the logged in user deleted their own record\n                if (id == this.userValue?.id) {\n                    this.logout();\n                }\n                return x;\n            }));\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}